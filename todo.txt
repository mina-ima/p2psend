✅ 開発ToDoリスト（機能別）

[DONE] 0. 初期セットアップ（Reactプロジェクト作成、ToDoリスト保存、ビルド確認）

1. 基盤設計
[DONE] •PeerJSシグナリングサーバーの独立運用方針の明確化と設定
•各OSごとの通信レイヤー検討（WebRTC / Bluetooth / LAN）
•Webアプリとネイティブアプリで共通コードの設計
•QRコード生成／読み取りロジックの共通化
•接続時の一時的なセッション管理設計

⸻

2. UI実装（全デバイス共通設計）
•起動時に「QRコード表示＋カメラ読み取り画面」同時表示
•接続ID表示＋入力欄UI
[DONE] •ファイル送信画面（ファイル選択ボタン） ※D&Dは未実装
•ファイル受信通知UI（受信完了・エラー通知など）

⸻

3. 通信機能
•近距離：BluetoothによるP2P接続実装（モバイル中心）
•局所LAN：同一Wi-Fi内での接続検出と通信
[DONE] •中距離：WebRTCベースのローカルP2P接続実装（Web＋ネイティブ）
•ファイルチャンク化・転送処理の最適化
•転送進捗の非同期処理（プログレス表示）

⸻

4. ファイル送受信処理
•ファイル選択→転送処理（複数ファイル対応）
•受信側への自動保存処理（ダウンロードフォルダ）
•ファイルサイズ・形式制限チェック
•通信中断時のリトライ処理

⸻

5. クロスプラットフォーム対応
•iOS / Android → Flutter または React Nativeで共通実装
•Web → PWA対応含むUI最適化
•Windows / Mac → Electron or Tauriベースでのデスクトップ化

⸻

6. テスト・リリース
•各プラットフォームでの通信テスト（特にクロス通信）
•接続・転送の安定性検証（Bluetooth、Wi-Fiそれぞれ）
•UXテスト（即時接続体験、D&D操作など）
•App Store / Google Play 審査用ビルド作成
•Webアプリホスティング（サーバーレス or GitHub Pages等）

⸻

7. その他（任意）
•設定画面（言語切替、通知音ON/OFFなど）
•ローカルファイル閲覧履歴（セッション中のみ表示）
•利用者向けヘルプ／使い方ページ（Web含む）

⸻

🚀 開発アプローチの提案
•初期バージョンは「Webアプリ + Androidアプリ」に絞ることで開発を小さく始めるのがおすすめです。
•通信方式はまず「同一Wi-Fi内でのP2P通信（WebRTC）」をベースにし、後からBluetoothを追加する形が現実的です。
•UIは共通フレームワーク（React + Tailwind / Flutterなど）で設計することで、マルチ展開しやすくなります。
